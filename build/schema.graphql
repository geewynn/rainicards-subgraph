type Account @entity {
  id: ID!
  balances: [Balance!]! @derivedFrom(field: "account")
}

type RainiCardsRegistry @entity {
  id: ID!
  cards: [RainiCardsNft!]! @derivedFrom(field: "registry")
}

type RainiCardsNft @entity {
  id: ID!
  registry: RainiCardsRegistry!
  identifier: BigInt!
  URI: String
  totalSupply: BigInt!
  balances: [Balance!]! @derivedFrom(field: "cards")
}

type Transfer implements Event @entity {
  id: ID!
  timestamp: BigInt!
  cards: RainiCardsNft!
  operator: Account!
  from: Account!
  fromBalance: Balance
  to: Account!
  toBalance: Balance
  value: BigInt!
}

type Balance @entity {
  id: ID!
  cards: RainiCardsNft!
  account: Account!
  value: BigInt!
}

interface Event {
  id: ID!
  timestamp: BigInt!
}

type Meta @entity(immutable: true) {
  "Meta data addess"
  id: ID!
  "Full meta data related to an address"
  nft: RainiCardsNft!
  "Content of the meta data"
  content: String
  "This is the content details for Oibel 1155NFT"
  name: String
  "Name for who created the NFT"
  createdBy: String
  "A decription the the creator can use to describe the NFT"
  description: String
  "Image URL"
  image: String
  "The artist that created the NFT"
  artist: String
  "Year the NFT was created"
  year: String
  "What collection the NFT is part of"
  collection: String
  "Who deployed the NFT"
  medium: String
}
